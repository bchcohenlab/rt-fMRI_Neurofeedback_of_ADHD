# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
alias analyse='docker run -it --rm --link-local-ip=192.168.2.5 -p 8888:8888 --cap-add=SYS_ADMIN -v ~/certs:/rt-cloud/certs -v /home/rt/rt-cloud/projects/adhd_rt:/rt-cloud/projects/adhd_rt -v /home/rt/sambashare:/home/rt/sambashare julianawall/adhd_rtcloud scripts/data_analyser.sh -p adhd_rt --subjectRemote'
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/rt/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/rt/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/rt/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/rt/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# meghan's aliases 
alias start='sudo smbd nmbd start'

nifti() {
    # Activate the rtcloud Conda environment
    conda activate rtcloud

    read -p "Do you want to see the list of available DICOM directories? (yes/no): " show_list_option

    if [ "$show_list_option" = "yes" ]; then
        # List directories inside /home/rt/sambashare, sorted by recency
        echo "Available DICOM directories:"
        directories=($(find /home/rt/sambashare/* -maxdepth 0 -type d -printf "%T@ %p\n" | sort -nr | cut -d' ' -f2))

        # Display numbered options for directories with a space between each option
        for ((i=0; i<${#directories[@]}; i++)); do
            echo "$((i+1)). $(basename ${directories[i]})"
            echo  # Add a blank line between options
        done

        # Ask the user to choose a number corresponding to the directory
        read -p "Enter the number of the DICOM directory you want to process: " choice

        # Validate the user's choice
        if [[ "$choice" =~ ^[1-9][0-9]*$ && "$choice" -le "${#directories[@]}" ]]; then
            selected_directory="${directories[choice-1]}"
            dcm2niix "$selected_directory"
        else
            echo "Invalid choice. Please enter a valid number corresponding to the directory."
        fi
    else
        # Ask the user to type the directory name directly
        read -p "Enter the name of the DICOM directory you want to process: " dicom_directory

        # Use find command to search for the directory based on the provided name
        found_directory=$(find /home/rt/sambashare -maxdepth 1 -type d -name "$dicom_directory")

        if [ -n "$found_directory" ]; then
            dcm2niix "$found_directory"
        else
            echo "Directory not found for the provided name: $dicom_directory"
        fi
    fi
}


localize_acc() {
    read -p "Enter subject ID: " subject_id
    echo "Using mw_localizer.py to localize the ACC"
    python3 /home/rt/rt-fMRI_Neurofeedback_of_ADHD/adhd_rt/mw_localizer.py "$subject_id"
}

localize_motor() {
    read -p "Enter subject ID: " subject_id
    echo "Using msit_preproc_script_motor_cortex.py to localize the motor cortex"
    python3 /home/rt/rt-fMRI_Neurofeedback_of_ADHD/adhd_rt/msit_preproc_script_motor_cortex.py "$subject_id"
}


localize_motor_hotspot() {
    read -p "Enter subject ID: " subject_id
    echo "Using msit_preproc_script_motor_cortex_hotspot.py to localize areas of peak activation in the Motor Cortex"
    python3 /home/rt/rt-fMRI_Neurofeedback_of_ADHD/adhd_rt/msit_preproc_script_motor_cortex_hotspot.py "$subject_id"
}


listener() {
    WEB_IP=192.168.2.5
    conda activate rtcloud
    cd rt-cloud/
    bash scripts/analysis_listener.sh -s "$WEB_IP":8888 -u rt
}

alias pingmac='ping 192.168.2.6'

# older registration alias 
registermask() {
    conda activate rtcloud
    cd /home/rt/rt-fMRI_Neurofeedback_of_ADHD/adhd_rt/registration_folder
    python3 flirt_registration.py
    cd /home/rt
} 

# newer registration alias 
process_msit() {
    conda activate rtcloud
    ~/.dcm2niix.sh
}
